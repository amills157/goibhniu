if k == "target":
            
            container_update.image = "dh157/goibhniu:{}".format(target_os)

        if user_defined:
            if container_update.ipv4_addr != None:
                container_update.ipv4_addr = container_update.ipv4_addr.replace("172.28", replace_subnet_dict["uwe_tek_external_usd"]).replace("172.29", replace_subnet_dict["uwe_tek_internal_usd"])

            for i in range(0, len(v[2])):
                v[2][i] = v[2][i].replace("--name {}".format(container_update.name), "--name {}_{}  --hostname {}_{}".format(scenario.name,container_update.name,scenario.name,container_update.name))

                v[2][i] = v[2][i].replace("172.28", replace_subnet_dict["uwe_tek_external_usd"]).replace("172.29", replace_subnet_dict["uwe_tek_internal_usd"])

                v[2][i] = v[2][i].replace("uwe_tek_external","uwe_tek_external_usd").replace("uwe_tek_internal","uwe_tek_internal_usd")

                if not os.path.isdir("{}/logfiles/{}".format(resource_file_path,scenario.name)):
                    os.makedirs("{}/logfiles/{}".format(resource_file_path,scenario.name))

                v[2][i] = v[2][i].replace("logfiles","logfiles/{}".format(scenario.name))

            container_update.name = "{}_{}".format(scenario.name,container_update.name)

        if k == "suricata":
            for i in range(0, len(v[2])):
                if user_defined:
                    v[2][i] = v[2][i].replace("dh157","-v {}/User_Defined_Scenarios/user_defined_suricata.yaml:/etc/suricata/suricata.yaml dh157".format(resource_file_path))

                    v[2][i] = v[2][i].replace("-i","-i {}".format(get_uwe_net_interface("172.20.0.1")))
                else:
                    v[2][i] = v[2][i].replace("-i","-i {}".format(get_uwe_net_interface("172.28.0.1")))

        running_container_info += custom_container_setup(v[0],v[1],v[2],v[3])

        if k == "target":
            if target_os.__contains__("ubuntu"):
                cmd_create = api_client.exec_create(container_update.name, "/usr/sbin/sshd", user="root")
        
                cmd_execute = api_client.exec_start(cmd_create, detach=True)

            if scenario.number_of_internal_containers >= 1:
                if user_defined:
                    docker_client.networks.get("uwe_tek_internal_usd").connect(container_update.name,ipv4_address="{}.0.200".format(replace_subnet_dict["uwe_tek_internal_usd"]))
                else:
                    docker_client.networks.get("uwe_tek_internal").connect(container_update.name,ipv4_address="172.29.0.200")
                    
                    
                            if custom_container == "random_traffic":
            container_update.command = traffic_target
            
        if custom_container == "auto_attack":

            cmd_args = auto_attack_target.split(" ")
            container_update.command = "-target {} -scanners {}".format(cmd_args[0],cmd_args[1])
            
            

        with open(original_docker_compose_file,'w') as dcf_edited:
            yaml.safe_dump(dcf_data, dcf_edited)

        docker_compose_cmd = "docker compose --project-directory {} up -d".format(dcf_dir_path)

        build_process = subprocess.run(['bash', '-c', docker_compose_cmd], stderr=subprocess.STDOUT, stdout=subprocess.PIPE)

        os.remove(original_docker_compose_file)

        os.rename(os.path.join(dcf_dir_path, "dcf_original.yml"), original_docker_compose_file)

        scenario.docker_compose_files.append(original_docker_compose_file)
